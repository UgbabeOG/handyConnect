// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview This file defines a Genkit flow for suggesting relevant handyman services to users.
 *
 * - suggestRelevantServices - A function that suggests relevant handyman services based on user profile and location.
 * - SuggestRelevantServicesInput - The input type for the suggestRelevantServices function.
 * - SuggestRelevantServicesOutput - The output type for the suggestRelevantServices function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestRelevantServicesInputSchema = z.object({
  userProfile: z
    .string()
    .describe('The user profile, including service and location preferences.'),
  handymanProfiles: z.string().describe('A list of available handyman profiles.'),
});
export type SuggestRelevantServicesInput = z.infer<
  typeof SuggestRelevantServicesInputSchema
>;

const SuggestRelevantServicesOutputSchema = z.object({
  suggestions: z
    .array(z.string())
    .describe('A list of suggested handyman services relevant to the user.'),
});
export type SuggestRelevantServicesOutput = z.infer<
  typeof SuggestRelevantServicesOutputSchema
>;

export async function suggestRelevantServices(
  input: SuggestRelevantServicesInput
): Promise<SuggestRelevantServicesOutput> {
  return suggestRelevantServicesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestRelevantServicesPrompt',
  input: {schema: SuggestRelevantServicesInputSchema},
  output: {schema: SuggestRelevantServicesOutputSchema},
  prompt: `You are a helpful assistant that suggests relevant handyman services to users based on their profile and available handyman profiles.

  User Profile: {{{userProfile}}}
  Handyman Profiles: {{{handymanProfiles}}}

  Based on the user's profile and the available handyman profiles, suggest a list of relevant handyman services.
  Format your response as a JSON object with a "suggestions" field containing an array of strings.
  `,
});

const suggestRelevantServicesFlow = ai.defineFlow(
  {
    name: 'suggestRelevantServicesFlow',
    inputSchema: SuggestRelevantServicesInputSchema,
    outputSchema: SuggestRelevantServicesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
